diff -U 2 partitions.ORG/ps2.c partitions/ps2.c
--- partitions.ORG/ps2.c	Thu Sep 11 21:45:34 2003
+++ partitions/ps2.c	Thu Sep 11 21:34:03 2003
@@ -66,6 +66,80 @@
 
 
+static int ps2_partition_one_old(struct gendisk *hd, kdev_t dev,
+			     struct ps2_partition *pp, int resvsize)
+{
+	int i, pno;
+	long nr_sects;
+	struct hd_struct *part;
+	struct hd_seg_struct *seg, *sp;
+	char *p, *pe;
+
+
+	if (pp->magic != PS2_PARTITION_MAGIC)
+		return 0;
+
+	if ((pp->flag & PS2_PART_FLAG_SUB) != 0)
+		return 1;
+
+	pe = &pp->id[PS2_PART_NID];
+	if (strncmp(pp->id, OLD_PS2_LINUX_ID, strlen(OLD_PS2_LINUX_ID)) == 0) {
+		/* PS2 Linux partition */
+		p = &pp->id[strlen(OLD_PS2_LINUX_ID)];
+		pno = 0;
+		while (p < pe && *p == ' ')
+			p++;
+		while (p < pe && *p >= '0' && *p <= '9')
+			pno = pno * 10 + (*p++ - '0');
+		if (pno == 0)
+			pno = 1;
+		if (pno < 1 || pno > hd->max_p - 1)
+			return 1;
+	} else
+                return 1;
+
+        part = &hd->part[MINOR(dev) + pno];
+
+	if (part->nr_sects != 0)
+		return 1;
+
+	if ((part->hash = (struct hd_seg_struct **)kmalloc(sizeof(struct hd_seg_struct *) * PS2_SEGMENT_HASH_ENTRIES, GFP_KERNEL)) == NULL)
+		return 0;
+	seg = (struct hd_seg_struct *)kmalloc(sizeof(struct hd_seg_struct) * (pp->nsub + 1), GFP_KERNEL);
+	if (seg == NULL) {
+		kfree(part->hash);
+		part->hash = NULL;
+		return 0;
+	}
+	part->nr_segs = pp->nsub + 1;
+	part->seg = seg;
+	seg->start_sect = part->start_sect = pp->start + resvsize;
+	seg->nr_sects = nr_sects = pp->nsector - resvsize;
+	seg->offset = 0;
+	seg++;
+	for (i = 0; i < pp->nsub; i++) {
+		seg->start_sect = pp->subs[i].start + resvsize;
+		seg->nr_sects = pp->subs[i].nsector - resvsize;
+		seg->offset = nr_sects;
+		nr_sects += seg->nr_sects;
+		seg++;
+	}
+	part->nr_sects = nr_sects;
+	part->hash_unit = (nr_sects + PS2_SEGMENT_HASH_ENTRIES - 1) / PS2_SEGMENT_HASH_ENTRIES;
+	sp = part->seg;
+	nr_sects = 0;
+	for (i = 0; i < PS2_SEGMENT_HASH_ENTRIES; i++) {
+		while (nr_sects < part->nr_sects &&
+		       nr_sects > sp->offset + sp->nr_sects)
+			sp++;
+		part->hash[i] = sp;
+		nr_sects += part->hash_unit;
+	}
+
+	return 1;
+}
+
+
 static int ps2_partition_one(struct gendisk *hd, kdev_t dev,
-			     struct ps2_partition *pp, int resv_m, int resv_s)
+		struct ps2_partition *pp, int resv_m, int resv_s, int origin)
 {
 	int i, pno;
@@ -100,4 +174,5 @@
 		return 1;
 
+	pno += origin;
         part = &hd-;>part[MINOR(dev) + pno];
 
@@ -153,8 +228,10 @@
 	struct buffer_head *bh;
 	int dev_bsize, dev_ssize, stob, resv_m, resv_s;
+	int resvsize;
 	struct ps2_partition *pp;
 	long sect;
 	int i;
 	char buf[8];
+	int origin;
 	kdev_t dev;
 
@@ -175,4 +252,5 @@
 	if (resv_s == 0)
 		resv_s = 1;
+	resvsize = resv_s;
 
 	sect = 0;
@@ -191,5 +269,25 @@
 			}
 		}
-		if (!ps2_partition_one(hd, dev, pp, resv_m, resv_s)) {
+		if (!ps2_partition_one_old(hd, dev, pp, resvsize)) {
+			brelse(bh);
+			break;
+		}
+		sect = pp->next;
+		brelse(bh);
+	} while (sect != 0);
+
+	origin = 0;
+	for (i = 1; i < hd->max_p; i++) {
+		if (hd->part[MINOR(dev) + i].nr_sects != 0) origin++;
+	}
+	sect = 0;
+	do {
+		if ((bh = bread(dev, sect / stob, dev_bsize)) == 0) {
+			printk("%s: unable to read sector %ld\n",
+				kdevname(dev), sect);
+			return -1;
+		}
+		pp = (struct ps2_partition *)bh->b_data;
+		if (!ps2_partition_one(hd, dev, pp, resv_m, resv_s, origin)) {
 			brelse(bh);
 			break;
diff -U 2 partitions.ORG/ps2.h partitions/ps2.h
--- partitions.ORG/ps2.h	Thu Sep 11 21:45:34 2003
+++ partitions/ps2.h	Thu Sep 11 21:32:13 2003
@@ -65,4 +65,5 @@
 
 #define PS2_LINUX_ID		"__linux."
+#define OLD_PS2_LINUX_ID	"linux"
 
 int ps2_partition(struct gendisk *hd, struct block_device *bdev , unsigned long first_sector, int first_part_minor);

